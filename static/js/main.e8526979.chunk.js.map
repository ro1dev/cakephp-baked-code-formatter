{"version":3,"sources":["Footer.tsx","TextArea.tsx","Tool.tsx","Header.tsx","App.tsx","serviceWorker.ts","index.tsx","img/tool.png"],"names":["Footer","Fragment","className","href","TextArea","useState","bakedCode","setBakedCode","convertedCode","setConvertedCode","textAreaRef","useRef","toastForCopy","toast","cols","rows","value","placeholder","onChange","e","target","onClick","code","result","replace","convertBakedCodeToBeEasy","current","select","document","execCommand","focus","id","ref","Tool","src","ToolImg","alt","width","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"qMAYeA,G,MAVA,WACX,OAAO,kBAAC,IAAMC,SAAP,KACH,4BAAQC,UAAU,oBAClB,uBAAGC,KAAK,wDAAwDD,UAAU,wBAA1E,c,OC+COE,EAjDE,WACb,IADmB,EAEeC,mBAAiB,IAFhC,mBAEZC,EAFY,KAEDC,EAFC,OAGuBF,mBAAiB,IAHxC,mBAGZG,EAHY,KAGGC,EAHH,KAIbC,EAAcC,mBAkBpB,IAKMC,EAAe,WACjBC,YAAM,+CAEV,OAAO,kBAAC,IAAMZ,SAAP,KACH,6BACI,8BAAUC,UAAU,QAAQY,KAAM,IAAOC,KAAM,GAAIC,MAAOV,EAAWW,YA/BxD,sWA+BsFC,SAAU,SAACC,GAAQZ,EAAaY,EAAEC,OAAOJ,WAEhJ,yBAAKd,UAAU,eACX,4BAAQA,UAAU,qDAAqDmB,QAAS,kBA5BvD,SAACC,GAC9B,IACMC,EADqBD,EAAKE,QAAQ,OAAQ,IACdA,QAAQ,MAAO,OACjDf,EAAiBc,GAyByEE,CAAyBnB,KAA/G,4BAGA,4BAAQJ,UAAU,oDAAoDmB,QAAS,kBAfnFd,EAAa,SACbE,EAAiB,MAcb,4BACA,4BAAQP,UAAU,qDAAqDmB,QA1B/E,SAAyBF,GACjBT,EAAYgB,UACZhB,EAAYgB,QAASC,SACrBC,SAASC,YAAY,QACrBV,EAAEC,OAAOU,QACTlB,OAqBA,uBAIJ,6BACI,8BAAUmB,GAAG,OAAOC,IAAKtB,EAAaR,UAAU,QAAQY,KAAM,GAAIC,KAAM,GAAIC,MAAOR,O,gBCpChFyB,EARF,WACT,OAAO,yBACKC,IAAKC,IACLC,IAAI,OACJC,MAAO,MCQRC,EAZA,WACX,OAAO,kBAAC,IAAMrC,SAAP,KACH,4BAAQC,UAAU,oBACd,wBAAIA,UAAU,eACV,kBAAC,EAAD,MADJ,4FAGI,kBAAC,EAAD,UCSDqC,MAXf,WACE,OACE,yBAAKrC,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,IAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASoB,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEjJ5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.e8526979.chunk.js","sourcesContent":["import React from 'react';\n\nconst Footer = () => {\n    return <React.Fragment>\n        <footer className=\"text-center mb-2\">\n        <a href=\"https://github.com/rrih/cakephp-baked-code-formatter/\" className=\"text-decoration-none\">\n            GitHub\n        </a>\n        </footer>\n    </React.Fragment>\n}\n\nexport default Footer;","import React, { useState, useRef } from 'react';\nimport { toast } from 'react-toastify';\n\nconst TextArea = () => {\n    const placeHolderCode = `ここにペースト\\n例:\\n$validator\\n\\t->integer('id')\\n\\t->allowEmptyString('id', null, 'create');\\n$validator\\n\\t->scalar('nickname')\\n\\t->maxLength('nickname', 255)\\n\\t->requirePresence('nickname', 'create')\\n\\t->notEmptyString('nickname')\\n\\t->add('nickname', 'unique', ['rule' => 'validateUnique', 'provider' => 'table']);`\n    const [bakedCode, setBakedCode] = useState<string>('');\n    const [convertedCode, setConvertedCode] = useState<string>('');\n    const textAreaRef = useRef<any>();\n\n  // 変換\n    const convertBakedCodeToBeEasy = (code: string) => {\n        const firstConvertedCode = code.replace(/\\s+/g, '');\n        const result = firstConvertedCode.replace(/;+/g, ';\\n');\n        setConvertedCode(result);\n    }\n\n    function copyToClipboard(e: any) {\n        if (textAreaRef.current) {\n            textAreaRef.current!.select();\n            document.execCommand('copy');\n            e.target.focus();\n            toastForCopy();\n        }\n    }\n\n    const reset = () => {\n        setBakedCode('');\n        setConvertedCode('');\n    }\n\n    const toastForCopy = () => {\n        toast('コピーしました');\n    }\n    return <React.Fragment>\n        <div>\n            <textarea className=\"w-100\" cols={10000} rows={15} value={bakedCode} placeholder={placeHolderCode} onChange={(e) => { setBakedCode(e.target.value) } }></textarea>\n        </div>\n        <div className=\"text-center\">\n            <button className=\"btn btn-outline-primary py-3 px-5 rounded-pill m-2\" onClick={() => convertBakedCodeToBeEasy(bakedCode)}>\n            変換する\n            </button>\n            <button className=\"btn btn-outline-danger py-3 px-5 rounded-pill m-2\" onClick={() => reset()}>リセット</button>\n            <button className=\"btn btn-outline-success py-3 px-5 rounded-pill m-2\" onClick={copyToClipboard}>\n            コピー\n            </button>\n        </div>\n        <div>\n            <textarea id=\"copy\" ref={textAreaRef} className=\"w-100\" cols={10} rows={15} value={convertedCode} ></textarea>\n        </div>\n    </React.Fragment>\n}\n\nexport default TextArea;","import ToolImg from './img/tool.png';\nimport React from 'react';\n\nconst Tool = () => {\n    return <img\n                src={ToolImg}\n                alt=\"tool\"\n                width={50}\n            />;\n}\n\nexport default Tool;","import React from 'react';\nimport Tool from './Tool';\n\nconst Header = () => {\n    return <React.Fragment>\n        <header className=\"text-center mb-2\">\n            <h1 className=\"text-center\">\n                <Tool />\n                CakePHPでbakeしたコードを変換するやつ\n                <Tool />\n            </h1>\n        </header>\n    </React.Fragment>\n}\n\nexport default Header;","import React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Footer from './Footer';\nimport TextArea from './TextArea';\nimport Header from './Header';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header />\n      <ToastContainer />\n      <TextArea />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/tool.090c2cc7.png\";"],"sourceRoot":""}