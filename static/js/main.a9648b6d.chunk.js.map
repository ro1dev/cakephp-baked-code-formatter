{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","bakedCode","setBakedCode","convertedCode","setConvertedCode","textAreaRef","useRef","toastForCopy","toast","className","cols","rows","value","placeholder","onChange","e","target","onClick","code","result","replace","convertBakedCodeToBeEasy","current","select","document","execCommand","focus","id","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAwDeA,MApDf,WACE,IADa,EAEqBC,mBAAiB,IAFtC,mBAENC,EAFM,KAEKC,EAFL,OAG6BF,mBAAiB,IAH9C,mBAGNG,EAHM,KAGSC,EAHT,KAIPC,EAAcC,mBAuBdC,EAAe,WACnBC,YAAM,WAGR,OACE,6BACE,iEACA,kBAAC,IAAD,MACA,6BACE,8BAAUC,UAAU,QAAQC,KAAM,IAAOC,KAAM,GAAIC,MAAOX,EAAWY,YAnCtD,sWAmCoFC,SAAU,SAACC,GAAQb,EAAaa,EAAEC,OAAOJ,WAE9I,4BAAQH,UAAU,0BAA0BQ,QAAS,kBA/BxB,SAACC,GAChC,IACMC,EADqBD,EAAKE,QAAQ,OAAQ,IACdA,QAAQ,MAAO,OACjDhB,EAAiBe,GA4B4CE,CAAyBpB,KAApF,WAGA,4BAAQQ,UAAU,yBAAyBQ,QAAS,kBAlBtDf,EAAa,SACbE,EAAiB,MAiBf,SACA,4BAAQK,UAAU,0BAA0BQ,QA7BhD,SAAyBF,GACnBV,EAAYiB,UACdjB,EAAYiB,QAASC,SACrBC,SAASC,YAAY,QACrBV,EAAEC,OAAOU,QACTnB,OAwBA,QAGA,6BACE,8BAAUoB,GAAG,OAAOC,IAAKvB,EAAaI,UAAU,QAAQC,KAAM,GAAIC,KAAM,GAAIC,MAAOT,OCtCvE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFZ,SAASa,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a9648b6d.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  const placeHolderCode = `ここにペースト\\n例:\\n$validator\\n\\t->integer('id')\\n\\t->allowEmptyString('id', null, 'create');\\n$validator\\n\\t->scalar('nickname')\\n\\t->maxLength('nickname', 255)\\n\\t->requirePresence('nickname', 'create')\\n\\t->notEmptyString('nickname')\\n\\t->add('nickname', 'unique', ['rule' => 'validateUnique', 'provider' => 'table']);`\n  const [bakedCode, setBakedCode] = useState<string>('');\n  const [convertedCode, setConvertedCode] = useState<string>('');\n  const textAreaRef = useRef<any>();\n\n// 変換\n  const convertBakedCodeToBeEasy = (code: string) => {\n    const firstConvertedCode = code.replace(/\\s+/g, '');\n    const result = firstConvertedCode.replace(/;+/g, ';\\n');\n    setConvertedCode(result);\n  }\n\n  function copyToClipboard(e: any) {\n    if (textAreaRef.current) {\n      textAreaRef.current!.select();\n      document.execCommand('copy');\n      e.target.focus();\n      toastForCopy();\n    }\n  }\n\n  const reset = () => {\n    setBakedCode('');\n    setConvertedCode('');\n  }\n\n  const toastForCopy = () => {\n    toast('copied');\n  }\n\n  return (\n    <div>\n      <h1>convert cakephp baked source code</h1>\n      <ToastContainer />\n      <div>\n        <textarea className=\"w-100\" cols={10000} rows={10} value={bakedCode} placeholder={placeHolderCode} onChange={(e) => { setBakedCode(e.target.value) } }></textarea>\n      </div>\n      <button className=\"btn btn-outline-primary\" onClick={() => convertBakedCodeToBeEasy(bakedCode)}>\n        convert\n      </button>\n      <button className=\"btn btn-outline-danger\" onClick={() => reset()}>reset</button>\n      <button className=\"btn btn-outline-success\" onClick={copyToClipboard}>\n        copy\n      </button>\n      <div>\n        <textarea id=\"copy\" ref={textAreaRef} className=\"w-100\" cols={10} rows={10} value={convertedCode} ></textarea>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}